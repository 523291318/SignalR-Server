use namespace="System.IO"

use namespace="System.IO.Compression"

use namespace="System.Linq"

use-standard-lifecycle
k-standard-goals

default NO_PARALLEL_TEST_PROJECTS='${E("NO_PARALLEL_TEST_PROJECTS")}'
default IgnoreDotnetTestExitCode = '${E("KOREBUILD_IGNORE_DOTNET_TEST_EXIT_CODE") == "true"}'

#xunit-test target='test' if='Directory.Exists("test")'
  @{
    var projectFiles = Files.Include("test/*/project.json");
	foreach (var projectFile in projectFiles)
	{
	  var content = File.ReadAllText(projectFile);
	  // Desktop tests only work on Windows. Only run the test on xplat if it has a netcoreapp1.0 TFM.
      if (content.Contains("\"testRunner\"") && (!IsLinux || content.Contains("netcoreapp1.0")))
      {
        var projectFolder = Path.GetDirectoryName(projectFile);
        var projectName = Path.GetFileName(projectFolder);

        var noParallelTestProjects = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
        if (!string.IsNullOrEmpty(NO_PARALLEL_TEST_PROJECTS))
        {
          noParallelTestProjects.UnionWith(NO_PARALLEL_TEST_PROJECTS.Split((char)','));
        }

        var testArgs = E("KOREBUILD_DOTNET_TEST_OPTIONS") + " --no-build" + " --configuration " + E("Configuration");
        //if (IsLinux)
        //{
        //  testArgs += " -f netcoreapp1.0";
        //}

        testArgs += noParallelTestProjects.Contains(projectName) ? " -parallel none" : "";

        try
        {
          Dotnet("test" + testArgs, projectFolder);
        }
        catch
        {
          if (!IgnoreDotnetTestExitCode)
          {
              // Ignore dotnet-test exit code if KOREBUILD_IGNORE_DOTNET_TEST_EXIT_CODE is set.
              throw;
          }
        }
      }
	}
  }